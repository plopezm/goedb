package database

import (
	"errors"
	"reflect"
	"strconv"
)

//TransientSQLDialect is the implementation of Transient SQL as Dialect
type TransientSQLDialect struct {
	Models map[string]Table
}

func (dialect *TransientSQLDialect) GetModel(name string) Table {
	return dialect.Models[name]
}

func (dialect *TransientSQLDialect) SetModel(name string, table Table) {
	dialect.Models[name] = table
}

//Create generates the SQL CREATE TABLE using a goedb table
func (dialect *TransientSQLDialect) Create(table Table) string {
	columns := ""
	pksFound := ""
	constraints := ""

	for _, value := range table.Columns {
		columnModel, pksColModel, constModel, err := getTransientSQLCreateColumn(value)
		if err != nil {
			continue
		}
		columns += columnModel
		pksFound += pksColModel
		constraints += constModel
	}

	if len(pksFound) > 0 {
		pksFound = pksFound[:len(pksFound)-1]
		constraints += ", PRIMARY KEY (" + pksFound + ")"
	}

	lastColumnIndex := len(columns)
	sqlquery := "CREATE TABLE " + table.Name + " (" + columns[:lastColumnIndex-1] + constraints + ")"
	return sqlquery
}

//First returns the TransientSQL sentence depending on the table and the instance
func (dialect *TransientSQLDialect) First(table Table, where string, instance interface{}) (string, error) {
	sql, relationContraints, err := generateSQLQuery(table, dialect.Models)

	if err != nil {
		return "", err
	}

	if where == "" {
		pkc, pkv, err := getPrimaryKeysAndValues(table, instance)
		if err != nil {
			return "", err
		}
		//sql += " WHERE " + table.Name + "." + pkc + "=" + pkv
		if len(pkc) > 0 {
			sql += " WHERE " + table.Name + "." + pkc[0] + "=" + pkv[0]
			for i := 1; i < len(pkc); i++ {
				sql += " AND " + table.Name + "." + pkc[i] + "=" + pkv[i]
			}
		}
	} else {
		sql += " WHERE " + where
	}
	//contraints are generated by relations between objects
	sql += relationContraints
	return sql, nil
}

//Find returns the TransientSQL sentence depending on the table and the instance
func (dialect *TransientSQLDialect) Find(table Table, where string, instance interface{}) (string, error) {
	//SQL generated by entity
	sql, relationContraints, err := generateSQLQuery(table, dialect.Models)

	if err != nil {
		return "", err
	}

	if where == "" && len(relationContraints) > 5 {
		//contraints are generated by relations between objects
		sql += " WHERE " + relationContraints[5:]
	} else if where != "" {
		//where clause
		sql += " WHERE " + where
		sql += relationContraints
	}

	return sql, nil
}

//Update returns the TransientSQL sentence depending on the table and the instance
func (dialect *TransientSQLDialect) Update(table Table, instance interface{}) (string, error) {
	columns, values, err := getColumnsAndValues(table, instance)
	if err != nil {
		return "", err
	}
	sql := "UPDATE " + table.Name + " SET "
	for i, column := range columns {
		sql += column + " = " + values[i] + ","
	}
	sql = sql[:len(sql)-1]
	pkc, pkv, err := getPrimaryKeysAndValues(table, instance)
	if err != nil {
		return "", errors.New("Error getting primary key")
	}
	//sql += " WHERE " + table.Name + "." + pkc + "=" + pkv
	if len(pkc) > 0 {
		sql += " WHERE " + table.Name + "." + pkc[0] + "=" + pkv[0]
		for i := 1; i < len(pkc); i++ {
			sql += " AND " + table.Name + "." + pkc[i] + "=" + pkv[i]
		}
	}
	return sql, nil
}

//Delete returns the TransientSQL sentence depending on the table and the instance
func (dialect *TransientSQLDialect) Delete(table Table, where string, instance interface{}) (string, error) {
	sql := "DELETE FROM " + table.Name + " WHERE "
	if where == "" {
		pkc, pkv, err := getPrimaryKeysAndValues(table, instance)
		if err != nil {
			return "", err
		}
		//sql += pkc + "=" + pkv
		if len(pkc) > 0 {
			sql += pkc[0] + "=" + pkv[0]
			for i := 1; i < len(pkc); i++ {
				sql += " AND " + pkc[i] + "=" + pkv[i]
			}
		}
	} else {
		sql += where
	}
	return sql, nil
}

//Drop returns the TransientSQL sentence depending on the table and the instance
func (dialect *TransientSQLDialect) Drop(tableName string) string {
	return "DROP TABLE " + tableName
}

// GetSQLColumnModel returns the model of a column for SQLite3
func getTransientSQLCreateColumn(value Column) (sqlColumnLine string, primaryKey string, constraints string, err error) {
	sqlColumnLine = value.Title

	switch value.ColumnType {
	case reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint:
		sqlColumnLine += " INTEGER"
	case reflect.Int64, reflect.Uint64:
		sqlColumnLine += " BIGINT"
	case reflect.Float32, reflect.Float64:
		sqlColumnLine += " FLOAT"
	case reflect.Bool:
		sqlColumnLine += " BOOLEAN"
	case reflect.String:
		sqlColumnLine += " VARCHAR"
	default:
		return "", "", "", errors.New("Type unknown")
	}

	if value.Unique {
		sqlColumnLine += " UNIQUE"
	}

	if value.PrimaryKey && value.AutoIncrement {
		sqlColumnLine += " PRIMARY KEY AUTOINCREMENT"
	} else if value.PrimaryKey {
		primaryKey += value.Title + ","
	}

	if value.ForeignKey.IsForeignKey {
		constraints += ", FOREIGN KEY (" + value.Title + ") REFERENCES " + value.ForeignKey.ForeignKeyTableReference + "(" + value.ForeignKey.ForeignKeyColumnReference + ")" + " ON DELETE CASCADE"
	}
	sqlColumnLine += ","
	return sqlColumnLine, primaryKey, constraints, nil
}

func generateSQLQuery(table Table, modelMap map[string]Table) (query string, constraints string, err error) {
	query = "SELECT "
	from := " FROM " + table.Name + ","
	constraints = ""

	for _, column := range table.Columns {

		if column.Ignore {
			continue
		}

		if !column.IsComplex {
			query += table.Name + "." + column.Title + ","
			continue
		}
		referencedTable, ok := modelMap[column.ColumnTypeName]

		if !ok {
			err = errors.New("Model " + column.ColumnTypeName + " NOT FOUND")
		}

		for _, primaryKey := range referencedTable.PrimaryKeys {
			if primaryKey.Name == column.ForeignKey.ForeignKeyColumnReference {
				constraints += " AND " + table.Name + "." + column.Title + " = " + referencedTable.Name + "." + primaryKey.Name
				err = referenceSQLEntity(&from, &query, &constraints, referencedTable, modelMap)
			}
		}
	}
	//Removing last ','
	query = query[:len(query)-1] + from[:len(from)-1]
	return query, constraints, err
}

func referenceSQLEntity(from *string, query *string, constraints *string, table Table, modelMap map[string]Table) (err error) {
	*from += table.Name + ","
	for _, column := range table.Columns {

		if column.Ignore {
			continue
		}

		if !column.IsComplex {
			*query += table.Name + "." + column.Title + ","
			continue
		}

		referencedTable, ok := modelMap[column.ColumnTypeName]

		if !ok {
			return errors.New("Model " + column.ColumnTypeName + " NOT FOUND")
		}

		for _, primaryKey := range referencedTable.PrimaryKeys {
			if primaryKey.Name == column.ForeignKey.ForeignKeyColumnReference {
				*constraints += " AND " + table.Name + "." + column.Title + " = " + referencedTable.Name + "." + primaryKey.Name
				referenceSQLEntity(from, query, constraints, modelMap[column.ColumnTypeName], modelMap)
			}
		}
	}
	return err
}

func getPrimaryKeysAndValues(gt Table, obj interface{}) (columnName []string, columnValue []string, err error) {
	err = errors.New("No primary key found")
	val := reflect.ValueOf(obj)

	if val.Kind() == reflect.Ptr {
		val = val.Elem()
	}

	for i := 0; i < len(gt.Columns); i++ {
		v := val.Field(i)
		columnToAnalize := gt.Columns[i]
		if columnToAnalize.PrimaryKey {
			columnName = append(columnName, gt.Columns[i].Title)
			err = nil
			if columnToAnalize.IsComplex {
				columnValue = append(columnValue, getRelationPrimaryKeyValue(columnToAnalize, v))
			} else {
				columnValue = append(columnValue, getPrimaryKeyValue(columnToAnalize, v))
			}
		}
	}
	return columnName, columnValue, err
}

func getPrimaryKeyValue(columnToAnalize Column, v reflect.Value) (columnValue string) {
	switch columnToAnalize.ColumnType {
	case reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int, reflect.Int64, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint, reflect.Uint64:
		columnValue = strconv.FormatInt(v.Int(), 10)
	case reflect.Float32, reflect.Float64:
		columnValue = strconv.FormatFloat(v.Float(), 'f', 6, 64)
	case reflect.Bool:
		if v.Bool() {
			columnValue = "1"
		} else {
			columnValue = "0"
		}
	case reflect.String:
		columnValue = "'" + v.String() + "'"
	}
	return columnValue
}

func getRelationPrimaryKeyValue(fkColumn Column, v reflect.Value) (columnValue string) {
	referencedFKColumn := v.FieldByName(fkColumn.ForeignKey.ForeignKeyColumnReference)

	switch fkColumn.ColumnType {
	case reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int, reflect.Int64, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint, reflect.Uint64:
		columnValue = strconv.FormatInt(referencedFKColumn.Int(), 10)
	case reflect.Float32, reflect.Float64:
		columnValue = strconv.FormatFloat(referencedFKColumn.Float(), 'f', 6, 64)
	case reflect.Bool:
		if v.Bool() {
			columnValue = "1"
		} else {
			columnValue = "0"
		}
	case reflect.String:
		columnValue = "'" + referencedFKColumn.String() + "'"
	}
	return columnValue
}

func getColumnsAndValues(table Table, instance interface{}) (columns []string, values []string, err error) {
	instanceType := GetType(instance)
	intanceValue := GetValue(instance)

	for i := 0; i < len(table.Columns); i++ {
		var value reflect.Value

		if table.Columns[i].Ignore {
			continue
		}

		if table.Columns[i].AutoIncrement {
			continue
		}

		if table.Columns[i].IsComplex {
			//_, value, err = GetGoedbTagTypeAndValueOfIndexField(instanceType, intanceValue, "pk", i)
			complexType := instanceType.Field(i).Type
			complexValue := intanceValue.Field(i)
			_, value, err = GetGoedbTagTypeAndValueOfForeignKeyReference(complexType, complexValue, "pk,unique", table.Columns[i].ForeignKey)
			if err != nil {
				return columns, values, err
			}
		} else {
			value = intanceValue.Field(i)
		}

		switch table.Columns[i].ColumnType {
		case reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int, reflect.Int64, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint, reflect.Uint64:
			//values += strconv.FormatInt(value.Int(), 10) + ","
			values = append(values, strconv.FormatInt(value.Int(), 10))
		case reflect.Float32, reflect.Float64:
			//values += strconv.FormatFloat(value.Float(), 'f', 6, 64) + ","
			values = append(values, strconv.FormatFloat(value.Float(), 'f', 6, 64))
		case reflect.Bool:
			if value.Bool() {
				//values += "1,"
				values = append(values, "1")
			} else {
				//values += "0,"
				values = append(values, "0")
			}
		case reflect.String:
			//values += "'" + value.String() + "',"
			values = append(values, "'"+value.String()+"'")
		}
		//columns += metatable.Columns[i].Title + ","
		columns = append(columns, table.Columns[i].Title)
	}
	//return strCols[:len(strCols)-1], strValues[:len(strValues)-1], nil
	return columns, values, err
}
